#!/usr/bin/env tclsh
##
## Copyright (c) 2019 Jan Kandziora <jjj@gmx.de>
##
## This source code is licensed under the GNU General Public License,
## Version 3. See the file COPYING for more details.
##

## Load packages.
package require cmdline

## Parse command line options.
if {[catch {set parameters [cmdline::getoptions argv {
	{o.arg xfs_undeleted "target directory for recovered files"}
	{s.arg 0 "start block"}
	{t.arg "" "deleted since"}
} {[options] -- options are:}]} result]} {
	puts stderr $result
	exit 127
}

## Get filesystem to scan from command line.
set fs [lindex $argv 0]

## Get the minimum ctime to consider.
if {[dict get $::parameters t] ne {}} {
	set mctime [clock scan [dict get $::parameters t]]
} else {
	set mctime 0
}

## Remount the target filesystem read-only if mounted.
catch {exec -ignorestderr -- mount 2>/dev/null -oremount,ro $fs}

## Create lost+found directory if nonexistent.
file mkdir [dict get $::parameters o]

## Defaults.
set blocksize 4096
set dblocks   4096
set agblocks  1024
set sectsize   512
set inodesize  512
set agblklog    10

## Open filesystem image for binary reading.
set fd [open $fs r]
fconfigure $fd -translation binary

## Read first superblock.
set data [read $fd $sectsize]

## Get real xfs configuration from filesytem superblock.
binary scan [string range $data   4   7] I blocksize
binary scan [string range $data   8  15] W dblocks
binary scan [string range $data  84  87] I agblocks
binary scan [string range $data 102 103] S sectsize
binary scan [string range $data 104 105] S inodesize
binary scan [string index $data     124] c agblklog

## Seek to start block.
seek $fd [expr {$blocksize*[dict get $::parameters s]}]

## Get message format.
set m1format "Checking block %[string length $dblocks]d/%[string length $dblocks]d  (%5.1f%%)\r"

## Run through whole filesystem.
for {set block [dict get $::parameters s]} {$block<$dblocks} {incr block} {
	## Log each visited block.
	puts -nonewline stderr [format $m1format $block $dblocks [expr {100*$block/double($dblocks)}]]

	## Read the block.
	set data [read $fd $blocksize]

	## Run through all potential inodes in a block.
	for {set boffset 0} {$boffset<$blocksize} {incr boffset $inodesize} {
		## Skip if not the magic string of an unused/deleted inode.
		if {[string range $data $boffset $boffset+7] ne "IN\0\0\3\2\0\0"} continue

		## Found. Get inode number.
		binary scan [string range $data $boffset+152 $boffset+159] W inode

		## Get ctime.
		binary scan [string range $data $boffset+48 $boffset+51] I ctime

		## Ignore files deleted before the specified time.
		if {$ctime<$mctime} {
			puts stderr "\nInode $inode was deleted [clock format $ctime], earlier than [clock format $mctime]. Ignored."
			continue
		}

		## Get output filename.
		set of [file join [dict get $::parameters o] $inode]

		## Recover any extents found.
		set recovered 0
		for {set ioffset 176} {$ioffset<$inodesize} {incr ioffset 16} {
			## Get extent.
			set extent [string range $data $boffset+$ioffset [expr {$boffset+$ioffset+15}]]

			## Ignore unused extents.
			if {$extent eq "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"} continue

			## Get data blocks from extent.
			binary scan $extent B* extbits
			set flag    [expr 0b[string index $extbits 0]]
			set loffset [expr 0b[string range $extbits 1 54]]
			set ag      [expr 0b[string range $extbits 55 106-$agblklog]]
			set ablock  [expr 0b[string range $extbits 107-$agblklog 106]]
			set count   [expr 0b[string range $extbits 107 127]]
			set skip    [expr {$ag*$agblocks+$ablock}]

			## Ignore preallocated, unwritten extents.
			if {$flag} continue

			## Silently ignore extents beyond the filesystem. These are clearly bogus.
			if {($skip+$count)>=$dblocks} continue

			## Silently ignore extents even a 64-bit dd cannot handle. These are most likely bogus.
			if {($blocksize*$loffset)>=(2**63-1)} continue

			## Recover the data from this extent. Ignore extents for which dd reported a problem.
			if {[catch {exec -ignorestderr -- dd if=$fs of=$of bs=$blocksize skip=$skip seek=$loffset count=$count conv=notrunc status=none}]} continue

			## Remember there was at least one recovered extent.
			set recovered 1
		}

		## Log if we had at least one recovered extent.
		if {$recovered} {
			puts stderr "\nRecovered deleted inode $inode."
		}
	}
}

## Done.
puts stderr "\nDone."
