#!/usr/bin/env tclsh
##
## Copyright (c) 2019 Jan Kandziora <jjj@gmx.de>
##
## This source code is licensed under the GNU General Public License,
## Version 3. See the file COPYING for more details.
##

## Load packages.
package require cmdline

## Parse command line options.
if {[catch {set parameters [cmdline::getoptions argv {
	{o.arg xfs_undeleted "target directory for recovered files"}
	{t.arg "" "deleted since"}
} {[options] -- options are:}]} result]} {
	puts stderr $result
	exit 127
}

## Get filesystem to scan from command line.
set fs [lindex $argv 0]

## Get the minimum ctime to consider.
if {[dict get $::parameters t] ne {}} {
	set mctime [clock scan [dict get $::parameters t]]
} else {
	set mctime 0
}

## Remount the target filesystem read-only if mounted.
set env(LANG) C
if {[catch {exec -- mount -oremount,ro $fs} err]} {
	## No error if not mounted.
	switch -glob -- $err {
		"* mount point not mounted or bad option." {}
		default {
			puts stderr $err
			exit 32
		}
	}
}

## Create lost+found directory if nonexistent.
file mkdir [dict get $::parameters o]

## Defaults.
set blocksize 4096
set dblocks   4096
set agblocks  1024
set agcount      4
set sectsize   512
set inodesize  512
set inopblock    8
set agblklog    10
set icount       0

## No inodes checked so far.
set ichecked 0

## Open filesystem image for binary reading.
set fd [open $fs r]
fconfigure $fd -translation binary

## Read first superblock.
set data [read $fd $sectsize]

## Get real xfs configuration from filesytem superblock.
binary scan [string range $data   4   7] Iu blocksize
binary scan [string range $data   8  15] Wu dblocks
binary scan [string range $data  84  87] Iu agblocks
binary scan [string range $data 102 103] Su sectsize
binary scan [string range $data 104 105] Su inodesize
binary scan [string range $data 106 107] Su inopblock
binary scan [string index $data     124] cu agblklog
binary scan [string range $data 128 136] Wu icount

## Set message formats.
set cmformat "Checking  inode %[string length $dblocks]d (%5.1f%%)\r"
set rmformat "Recovered inode %[string length $dblocks]d, deleted %s."
set dmformat "Done.           %[string length $dblocks]s           "

## Function: investigate inode block.
proc investigateInodeBlock {ag block} {
	## Calculate device block number.
	set dblock [expr {$::agblocks*$ag+$block}]

	## Read the block.
	seek $::fd [expr {$::blocksize*$dblock}]
	set data [read $::fd $::blocksize]

	## Run through all potential inodes in a block.
	for {set boffset 0} {$boffset<$::blocksize} {incr boffset $::inodesize} {
		## Log each visited inode.
		puts -nonewline stderr [format $::cmformat [expr {$dblock/$::inopblock}] [expr {100*$::ichecked/double($::icount)}]]
		incr ::ichecked

		## Skip if not the magic string of an unused/deleted inode.
		if {[string range $data $boffset $boffset+7] ne "IN\0\0\3\2\0\0"} continue

		## Found. Get inode number.
		binary scan [string range $data $boffset+152 $boffset+159] Wu inode

		## Get ctime.
		binary scan [string range $data $boffset+48 $boffset+51] Iu ctime

		## Ignore files deleted before the specified time.
		if {$ctime<$::mctime} continue

		## Get output filename.
		set of [file join [dict get $::parameters o] $inode]

		## Recover any extents found.
		set recovered 0
		for {set ioffset 176} {$ioffset<$::inodesize} {incr ioffset 16} {
			## Get extent.
			set extent [string range $data $boffset+$ioffset [expr {$boffset+$ioffset+15}]]

			## Ignore unused extents.
			if {$extent eq "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"} continue

			## Get data blocks from extent.
			binary scan $extent B* extbits
			set flag    [expr 0b[string index $extbits 0]]
			set loffset [expr 0b[string range $extbits 1 54]]
			set aag     [expr 0b[string range $extbits 55 106-$::agblklog]]
			set ablock  [expr 0b[string range $extbits 107-$::agblklog 106]]
			set count   [expr 0b[string range $extbits 107 127]]
			set skip    [expr {$aag*$::agblocks+$ablock}]

			## Ignore preallocated, unwritten extents.
			if {$flag} continue

			## Silently ignore extents beyond the filesystem. These are clearly bogus.
			if {($skip+$count)>=$::dblocks} continue

			## Silently ignore extents even a 64-bit dd cannot handle. These are most likely bogus.
			if {($::blocksize*$loffset)>=(2**63-1)} continue

			## Recover the data from this extent. Ignore extents for which dd reported a problem.
			if {[catch {exec -ignorestderr -- dd if=$::fs of=$of bs=$::blocksize skip=$skip seek=$loffset count=$count conv=notrunc status=none}]} continue

			## Remember there was at least one recovered extent.
			set recovered 1
		}

		## Log if we had at least one recovered extent.
		if {$recovered} {
			puts stderr [format $::rmformat $inode [clock format $ctime]]
		}
	}
}

## Function: traverse through inode tree.
proc traverseInodeTree {ag block} {
	## Read inode tree block.
	seek $::fd [expr {$::blocksize*($::agblocks*$ag+$block)}]
	set data [read $::fd $::blocksize]

	## Set record start index depending on inode btree magic.
	## Ignore any tree of unknown format.
	switch -- [string range $data 0 3] {
		IABT {set index 16}
		IAB3 {set index 56}
		default return
	}

	## Get level and number of records.
	binary scan [string range $data 4 5] Su bb_level
	binary scan [string range $data 6 7] Su bb_numrecs

	## Check if node or leaf.
	if {$bb_level>0} {
		## Node. Run through all pointer records.
		for {set rec 0 ; set index [expr {($::blocksize+$index)/2}]} {$rec<$bb_numrecs} {incr rec ; incr index 4} {
			## Get block number of branch.
			binary scan [string range $data $index $index+3] Iu agi_branch

			## Traverse through branch.
			traverseInodeTree $ag $agi_branch
		}
	} else {
		## Go through all leaf records.
		for {set rec 0} {$rec<$bb_numrecs} {incr rec ; incr index 16} {
			## Get start inode number.
			binary scan [string range $data $index $index+3] Iu agi_start

			## Run through all inode records.
			for {set inode 0} {$inode<64} {incr inode $::inopblock} {
				## Get block number.
				set iblock [expr {($agi_start+$inode)/$::inopblock}]

				## Investigate that block for deleted inodes.
				investigateInodeBlock $ag $iblock
			}
		}
	}
}

## Run through all allocation groups.
for {set ag 0} {$ag<$agcount} {incr ag} {
	## Read inode B+tree information sector of this allocation group.
	seek $fd [expr {$blocksize*$agblocks*$ag+2*$sectsize}]
	set data [read $fd $sectsize]

	## Get allocation group inode root block and number of levels.
	binary scan [string range $data 20 23] Iu agi_root
	binary scan [string range $data 24 27] Iu agi_level

	## Start traversal of this allocation group's inode B+Tree with root block.
	traverseInodeTree $ag $agi_root
}

## Print completion messages.
puts stderr [format $::dmformat {}]
